{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lakers ( 44.0 , 28.0 )\n",
      "clippers ( 46.0 , 26.0 )\n",
      "warriors ( 28.0 , 44.0 )\n",
      "suns ( 44.0 , 28.0 )\n",
      "kings ( 41.0 , 31.0 )\n",
      "thunder ( 25.0 , 47.0 )\n",
      "nuggets ( 35.0 , 37.0 )\n",
      "timberwolves ( 29.0 , 43.0 )\n",
      "blazers ( 37.0 , 35.0 )\n",
      "jazz ( 45.0 , 27.0 )\n",
      "spurs ( 30.0 , 42.0 )\n",
      "mavericks ( 42.0 , 30.0 )\n",
      "rockets ( 35.0 , 37.0 )\n",
      "grizzlies ( 32.0 , 40.0 )\n",
      "pelicans ( 40.0 , 32.0 )\n",
      "bulls ( 30.0 , 42.0 )\n",
      "cavs ( 27.0 , 45.0 )\n",
      "pistons ( 27.0 , 45.0 )\n",
      "pacers ( 37.0 , 35.0 )\n",
      "bucks ( 46.0 , 26.0 )\n",
      "magic ( 29.0 , 43.0 )\n",
      "heat ( 35.0 , 37.0 )\n",
      "hawks ( 37.0 , 35.0 )\n",
      "hornets ( 32.0 , 40.0 )\n",
      "wizards ( 34.0 , 38.0 )\n",
      "knicks ( 26.0 , 46.0 )\n",
      "nets ( 44.0 , 28.0 )\n",
      "sixers ( 40.0 , 32.0 )\n",
      "celtics ( 38.0 , 34.0 )\n",
      "raptors ( 42.0 , 30.0 )\n"
     ]
    }
   ],
   "source": [
    "import random as rnd\n",
    "from itertools import combinations as com\n",
    "\n",
    "#team = [Ppg, Pall, SD_ppg, SD_oppg, name, games won, conf(1=west, 2=east)]\n",
    "lakers = [114.66, 107.17, 12,11.50, \"lakers\",0, 1]\n",
    "clippers = [114.10, 104.7, 13.56,13.26, \"clippers\",0,1]\n",
    "warriors = [112.96, 118.78, 12.37,12.51, \"warriors\", 0,1]\n",
    "suns = [115.8, 108.93, 12.12,10.49, \"suns\",0, 1]\n",
    "kings = [117.5,113.17,11.09,12.23,\"kings\",0,1]\n",
    "thunder = [103.32,111.68, 11.69,10.95, \"thunder\", 0,1]\n",
    "nuggets = [103.89, 104, 11.14,11.66, \"nuggets\",0,1]\n",
    "timberwolves =[113.53, 118.71, 11.4,12.87, \"timberwolves\",0,1]\n",
    "blazers = [116.93, 115.51, 11.25, 10.8, \"blazers\", 0,1]\n",
    "jazz = [108.99, 100.86, 11.16, 11.84, \"jazz\",0,1]\n",
    "spurs = [105.03, 108.94, 10.7, 10.94, \"spurs\",0,1]\n",
    "mavericks = [115.23, 109.64,11.75,11.95,\"mavericks\",0,1]\n",
    "rockets = [106.73, 107.47, 13.72,11.33, \"rockets\", 0, 1]\n",
    "grizzlies = [111.26, 113.91, 11.37,13.73, \"grizzlies\",0,1]\n",
    "pelicans = [112.4, 108.7, 10.91,11.54, \"pelicans\",0,1]\n",
    "\n",
    "#east\n",
    "bulls = [110.7, 115.24, 11.06,10.46, \"bulls\",0,2]\n",
    "cavs = [106.16, 113.24, 10.10,12.75,\"cavs\", 0,2]\n",
    "pistons = [102.76,110.48, 12.28,10.41,\"pistons\",0,2]\n",
    "pacers =[110.13, 109.6, 10.29, 10.93, \"pacers\",0,2]\n",
    "bucks = [116.37,107.6, 11.54, 13.03, \"bucks\", 0,2]\n",
    "magic = [104.46, 110.91, 13.62,11.91, \"magic\",0,2]\n",
    "heat = [109.56, 110.94, 12.11,10.87, \"heat\",0,2]\n",
    "hawks = [118.63,117.48, 13.84, 13.94 ,\"hawks\",0,2]\n",
    "hornets =[111.83, 115.24, 11.53, 12.43, \"hornets\",0,2]\n",
    "wizards =[118.07, 120.08, 13.04, 14.24, \"wizards\",0,2]\n",
    "knicks = [105.59, 114.58, 13.26, 13.68, \"knicks\",0,2]\n",
    "nets = [119.20, 112.97, 12, 12.53, \"nets\", 0,2]\n",
    "sixers = [107.86, 104.8, 11.57,11.7, \"sixers\",0,2]\n",
    "celtics = [107.29, 105.5, 11.89,10.89, \"celtics\",0,2]\n",
    "raptors = [108.43, 103.47, 12.59, 10.9, \"raptors\", 0,2]\n",
    "\n",
    "\n",
    "teams = [lakers, clippers, warriors, suns, kings, thunder, nuggets, timberwolves, blazers, jazz, spurs, mavericks, rockets,\n",
    "         grizzlies, pelicans,       bulls, cavs, pistons, pacers, bucks, magic, heat, hawks, hornets, wizards, knicks, nets,\n",
    "        sixers, celtics, raptors]\n",
    "games= list(com(teams,2))\n",
    "\n",
    "num_teams = 30\n",
    "# this is number of games if every teams played every other team just once (adjusted for repeats yields 1080 total games)\n",
    "num_games = 435\n",
    "\n",
    "\n",
    "\n",
    "def game(t1,t2):\n",
    "    t1s =((rnd.gauss(t1[0],t1[2]) + rnd.gauss(t2[1],t2[3]))/2)\n",
    "    t2s = ((rnd.gauss(t2[0],t2[2]) + rnd.gauss(t1[1], t1[3]))/2)\n",
    "    if t1s > t2s:\n",
    "        t1[5]= t1[5]+1\n",
    "        \n",
    "    else:\n",
    "        t2[5]= t2[5]+1\n",
    "            \n",
    "    #print(t1[3],\":\",t1s,\"  \",t2[3],\":\",t2s)\n",
    "    #print(\"(\", t1[4],\")\", \"                         \" , \"(\",t2[4],\")\" )\n",
    "\n",
    "\n",
    "def season():\n",
    "    x=0\n",
    "    for i in range(num_games):\n",
    "\n",
    "        t1= games[x][0]\n",
    "        t2= games[x][1]\n",
    "        \n",
    "        if (t1[6] == t2[6]):\n",
    "            game(t1,t2)\n",
    "            game(t1,t2)\n",
    "            game(t1,t2)\n",
    "        else:\n",
    "            game(t1,t2)\n",
    "            game(t1,t2)\n",
    "        \n",
    "        x=x+1\n",
    "    x=0\n",
    "    for i in range(num_teams):\n",
    "    \n",
    "        #print( teams[x][4], \"(\", teams[x][5],\",\" , 4-teams[x][5], \")\")\n",
    "        x=x+1\n",
    "        \n",
    "        \n",
    "        \n",
    "#season()\n",
    "\n",
    "   \n",
    "# now lets iterate over multiple seasons\n",
    "\n",
    "\n",
    "def mult_seasons(x):\n",
    "    \n",
    "    for i in range(x):\n",
    "        season()\n",
    "        x=0\n",
    "        for i in range(num_teams):\n",
    "    \n",
    "            print( teams[x][4], \"(\", teams[x][5],\",\" , 72-teams[x][5], \")\")\n",
    "            x=x+1\n",
    "        \n",
    "        #this starts the season from the begining\n",
    "        p=0\n",
    "        for i in range(num_teams):\n",
    "            teams[p][5]=0\n",
    "            p=p+1\n",
    "    print('\\n') \n",
    "    \n",
    "\n",
    "#mult_seasons(5)\n",
    "\n",
    "def avg_mult_seasons(s):\n",
    "    \n",
    "    \n",
    "    for i in range(s):\n",
    "        season()\n",
    "        \n",
    "    r=0\n",
    "    #iterates over the number of teams\n",
    "    for i in range(num_teams):\n",
    "        print(teams[r][4],\"(\" ,round((teams[r][5])/s,0),\",\",round(72-(teams[r][5]/s),0)  ,\")\")\n",
    "        r = r+1\n",
    "        \n",
    "avg_mult_seasons(1000)\n",
    "\n",
    "\n",
    "        \n",
    "\n",
    "\n",
    "    \n",
    "    \n",
    "\n",
    "\n",
    "        \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

